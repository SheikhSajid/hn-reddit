{"version":3,"sources":["Components/Post/Comment.jsx","Components/Post/Comments.jsx","utils/getComments.js","Components/Post/SortDropdown.jsx","Components/Post/CommentsContainer.jsx","Components/Post/PostContent.jsx","Components/Post/FullPost.jsx","utils/getTopPosts.js","Components/PostsList/PostEntry.jsx","Components/PostsList/PostList.jsx","App.js","serviceWorker.js","index.js"],"names":["comment","created_at","author","text","children","timestamp","distanceInWordsToNow","Date","addSuffix","useState","childrenHidden","setChildrenHidden","showHideChildren","useCallback","className","onClick","dangerouslySetInnerHTML","__html","length","Comments","comments","style","map","Comment","key","id","usePostComments","commentsRef","useRef","useQuery","args","getComments","staleTime","data","isLoading","option","updater","current","oldComments","commentsCopy","sort","cmt1","cmt2","created_at_i","sortCommentsImpl","queryCache","setQueryData","a","fetch","response","json","post","DropdownMenu","clickHandler","options","selectedOption","color","undefined","sortComments","setSelectedOption","handler","postId","loading","SortDropdown","marginLeft","by","descendants","score","time","title","url","urlShortened","textShortened","hnUrl","slice","openExtLinkInNewTab","event","stopPropagation","window","open","focus","openInNewTab","copyToClipboard","navigator","clipboard","writeText","then","alert","catch","err","console","error","startsWith","clearDisplayedPost","marginBottom","backgroundColor","top","left","paddingLeft","PostContent","CommentsContainer","fetchPosts","allPostIds","pagesFetchedSoFar","idsToFetch","log","reqs","forEach","req","push","Promise","all","responses","jsonPromises","res","posts","fetchTopPostIds","memo","setDisplayedPost","openHNPageInNewTab","dataLength","next","hasMore","loader","width","endMessage","PostEntry","App","topPostIds","useInfiniteQuery","getFetchMore","lastGroup","allGroups","enabled","postsArray","isFetchingMore","fetchMore","flat","useTopPosts","displayedPost","PostList","FullPost","Boolean","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","serviceWorker","ready","registration","unregister","message"],"mappings":"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","file":"static/js/main.2c888e9e.chunk.js","sourcesContent":["import React, { useState, useCallback } from 'react';\r\nimport distanceInWordsToNow from 'date-fns/formatDistanceToNow';\r\nimport Comments from './Comments';\r\n\r\nexport default ({ comment }) => {\r\n  const { created_at, author, text, children } = comment;\r\n  const timestamp = distanceInWordsToNow(new Date(created_at), {\r\n    addSuffix: true,\r\n  });\r\n\r\n  const [childrenHidden, setChildrenHidden] = useState(false);\r\n\r\n  const showHideChildren = useCallback(() => {\r\n    if (childrenHidden) setChildrenHidden(false);\r\n    else setChildrenHidden(true);\r\n  }, [setChildrenHidden]);\r\n\r\n  return (\r\n    <div className=\"comment-container comment-container-outer\">\r\n      {!childrenHidden && (\r\n        <div\r\n          onClick={showHideChildren}\r\n          className=\"threadline-container threadline-container-outer\"\r\n        >\r\n          <div className=\"threadline\"></div>\r\n        </div>\r\n      )}\r\n\r\n      <div className=\"comment-content\">\r\n        <div onClick={() => setChildrenHidden(false)} className=\"post-metadata\">\r\n          {childrenHidden && '[+]'}\r\n          {author} Â· {timestamp}\r\n        </div>\r\n\r\n        {!childrenHidden && (\r\n          <div\r\n            className=\"comment-body\"\r\n            dangerouslySetInnerHTML={{ __html: text }}\r\n          ></div>\r\n        )}\r\n\r\n        {!childrenHidden && !!children.length && (\r\n          <Comments comments={children} />\r\n        )}\r\n      </div>\r\n    </div>\r\n  );\r\n};\r\n","import React from 'react';\r\nimport Comment from './Comment';\r\n\r\nexport default ({ comments, style }) => {\r\n  return (\r\n    <div style={style} className=\"comments\">\r\n      {comments.map((comment) => (\r\n        <Comment key={comment.id} comment={comment} />\r\n      ))}\r\n    </div>\r\n  );\r\n};\r\n","import { useRef } from 'react';\r\nimport { useQuery, queryCache } from 'react-query';\r\n\r\nexport function usePostComments(id) {\r\n  const commentsRef = useRef([]);\r\n\r\n  const { data: comments, isLoading } = useQuery(\r\n    ['postWithComments', id],\r\n    (...args) => getComments(...args, commentsRef),\r\n    {\r\n      staleTime: 1000 * 60 * 3 /* 3 minutes */,\r\n    }\r\n  );\r\n\r\n  const sortComments = (option) => {\r\n    let updater;\r\n\r\n    if (option === 'Default') {\r\n      updater = () => commentsRef.current;\r\n    } else {\r\n      updater = (oldComments) => sortCommentsImpl(option, oldComments);\r\n    }\r\n\r\n    queryCache.setQueryData(['postWithComments', id], updater);\r\n  };\r\n\r\n  return [comments, isLoading, sortComments];\r\n}\r\n\r\nasync function getComments(key, id, commentsRef) {\r\n  const response = await fetch(`https://hn.algolia.com/api/v1/items/${id}`);\r\n  const post = await response.json();\r\n\r\n  // store the default order of comments from the server in a ref\r\n  if (commentsRef) commentsRef.current = post.children;\r\n\r\n  return post.children;\r\n}\r\n\r\nfunction sortCommentsImpl(option, comments) {\r\n  const commentsCopy = [...comments];\r\n\r\n  switch (option) {\r\n    case 'Newest':\r\n      commentsCopy.sort((cmt1, cmt2) => cmt2.created_at_i - cmt1.created_at_i);\r\n      break;\r\n    case 'Oldest':\r\n      commentsCopy.sort((cmt1, cmt2) => cmt1.created_at_i - cmt2.created_at_i);\r\n      break;\r\n    default:\r\n      return comments;\r\n  }\r\n\r\n  return commentsCopy;\r\n}\r\n","import React from 'react';\r\nimport { useState } from 'react';\r\nimport { useCallback } from 'react';\r\n\r\nconst DropdownMenu = ({ clickHandler, options, selectedOption }) => {\r\n  return (\r\n    <div className=\"dropdown-menu-container\">\r\n      <ul className=\"dropdown-menu\">\r\n        {options.map((option) => {\r\n          const style =\r\n            option === selectedOption\r\n              ? { color: 'var(--orange-accent)' }\r\n              : undefined;\r\n          return (\r\n            <li style={style} key={option} onClick={() => clickHandler(option)}>\r\n              {option}\r\n            </li>\r\n          );\r\n        })}\r\n      </ul>\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default ({ sortComments }) => {\r\n  const options = [\r\n    // 'Most Points',\r\n    'Default',\r\n    'Newest',\r\n    'Oldest',\r\n    // 'Least Points',\r\n  ];\r\n  const [selectedOption, setSelectedOption] = useState('Default');\r\n\r\n  const handler = useCallback(\r\n    (option) => {\r\n      setSelectedOption(option);\r\n      sortComments(option);\r\n    },\r\n    [setSelectedOption, sortComments]\r\n  );\r\n\r\n  return (\r\n    <div className=\"sort-comment-dropdown\">\r\n      Sort By\r\n      <div className=\"dropdown-container\">\r\n        <span>{selectedOption}</span>\r\n        <DropdownMenu\r\n          clickHandler={handler}\r\n          options={options}\r\n          selectedOption={selectedOption}\r\n        />\r\n      </div>\r\n    </div>\r\n  );\r\n};\r\n","import React, { Fragment } from 'react';\r\nimport Comments from './Comments';\r\nimport { usePostComments } from '../../utils/getComments';\r\nimport SortDropdown from './SortDropdown';\r\n\r\nexport default ({ postId }) => {\r\n  const [comments, loading, sortComments] = usePostComments(postId);\r\n\r\n  return (\r\n    <Fragment>\r\n      {!loading && <SortDropdown sortComments={sortComments} />}\r\n      {!loading && (\r\n        <Comments style={{ marginLeft: '-20px' }} comments={comments} />\r\n      )}\r\n      {loading && <h1>Loading Comments...</h1>}\r\n    </Fragment>\r\n  );\r\n};\r\n","import React, { Fragment, useCallback } from 'react';\r\nimport distanceInWordsToNow from 'date-fns/formatDistanceToNow';\r\n\r\nfunction openInNewTab(event, url) {\r\n  event.stopPropagation();\r\n  var win = window.open(url, '_blank');\r\n  win.focus();\r\n}\r\n\r\nexport default ({ post }) => {\r\n  const { by, descendants, id, score, time, title, text, url } = post;\r\n\r\n  const timestamp = distanceInWordsToNow(new Date(time * 1000), {\r\n    addSuffix: true,\r\n  });\r\n  let urlShortened = '';\r\n  let textShortened = '';\r\n  const hnUrl = `https://news.ycombinator.com/item?id=${id}`;\r\n\r\n  if (text && text.length > 900) {\r\n    textShortened = text.slice(0, 900) + '...';\r\n    textShortened += `<br />\r\n                      <a target=\"_blank\" \r\n                         rel=\"noopener noreferrer\"\r\n                         href='${hnUrl}'\r\n                      >\r\n                        Read more\r\n                      </a>`;\r\n  }\r\n\r\n  const openExtLinkInNewTab = useCallback((event) => openInNewTab(event, url), [\r\n    url,\r\n  ]);\r\n\r\n  const copyToClipboard = useCallback(\r\n    (event) => {\r\n      event.stopPropagation();\r\n      navigator.clipboard\r\n        .writeText(url)\r\n        .then(() => alert(`URL copied: ${url}`))\r\n        .catch((err) => console.error(err));\r\n    },\r\n    [url]\r\n  );\r\n\r\n  if (url) {\r\n    urlShortened = url.startsWith('https://')\r\n      ? url.slice(8, 33)\r\n      : url.slice(0, 25);\r\n    urlShortened = urlShortened.startsWith('http://')\r\n      ? urlShortened.slice(7, 32)\r\n      : urlShortened.slice(0, 25);\r\n    urlShortened = urlShortened.startsWith('www.')\r\n      ? urlShortened.slice(4)\r\n      : urlShortened.slice(0);\r\n\r\n    if (urlShortened.slice(-1) === '/')\r\n      urlShortened = urlShortened.slice(0, -1);\r\n    if (url.length > 33) urlShortened += '...';\r\n  }\r\n\r\n  return (\r\n    <Fragment>\r\n      <div className=\"like-count\">\r\n        <div>{score}</div>\r\n        <div>Likes</div>\r\n      </div>\r\n\r\n      <div className=\"post-content\">\r\n        <div className=\"post-metadata\">\r\n          Posted by {by} {timestamp}\r\n        </div>\r\n        <h2 className=\"post-title\">{title}</h2>\r\n        <div className=\"post-body\">\r\n          {url && (\r\n            <p onClick={openExtLinkInNewTab} className=\"url-shortened\">\r\n              {urlShortened}\r\n            </p>\r\n          )}\r\n          {text && (\r\n            <div\r\n              className=\"post-text\"\r\n              dangerouslySetInnerHTML={{ __html: textShortened }}\r\n            ></div>\r\n          )}\r\n        </div>\r\n\r\n        <div className=\"post-bottom\">\r\n          <div>{descendants} Comments</div>\r\n          <div onClick={copyToClipboard}>Copy Link</div>\r\n          <div>Save</div>\r\n          <div>Hide</div>\r\n        </div>\r\n      </div>\r\n    </Fragment>\r\n  );\r\n};\r\n","import React, { Fragment } from 'react';\r\nimport CommentsContainer from './CommentsContainer';\r\nimport PostContent from './PostContent';\r\n\r\nexport default ({ post, clearDisplayedPost }) => {\r\n  return (\r\n    <Fragment>\r\n      <button\r\n        style={{\r\n          // TODO: Move inline styles to global CSS\r\n          marginBottom: '-2px',\r\n          backgroundColor: 'white',\r\n        }}\r\n        onClick={clearDisplayedPost}\r\n      >\r\n        {'< back'}\r\n      </button>\r\n\r\n      <div\r\n        style={{\r\n          // TODO: Move inline styles to global CSS\r\n          // height: '100%',\r\n          // backgroundColor: '#F6F6EF',\r\n          // position: 'absolute',\r\n          top: 0,\r\n          left: 0,\r\n          paddingLeft: '40px',\r\n        }}\r\n        className=\"post post-display\"\r\n      >\r\n        <PostContent post={post} />\r\n        <CommentsContainer postId={post.id} />\r\n      </div>\r\n    </Fragment>\r\n  );\r\n};\r\n","// import { useRef } from 'react';\r\nimport { useInfiniteQuery, useQuery } from 'react-query';\r\n\r\nexport function useTopPosts() {\r\n  // Fetch the IDs of the Top Stories\r\n  const { data: topPostIds } = useQuery('topPostIds', fetchTopPostIds, {\r\n    staleTime: 1000 * 60 * 3 /* 3 minutes */,\r\n  });\r\n\r\n  const { data: postsArray, isFetchingMore, fetchMore } = useInfiniteQuery(\r\n    'topPosts',\r\n    (...args) => fetchPosts(topPostIds || [], ...args),\r\n    {\r\n      getFetchMore: (lastGroup, allGroups) => {\r\n        const ret = allGroups.length < 500 ? allGroups.length : void 0;\r\n        return ret;\r\n      },\r\n      enabled: topPostIds, // Pause until IDs are loaded\r\n      staleTime: 1000 * 60 * 3 /* 3 minutes */,\r\n    }\r\n  );\r\n\r\n  const posts = postsArray ? postsArray.flat() : [];\r\n  return [posts, isFetchingMore, fetchMore];\r\n}\r\n\r\nasync function fetchPosts(allPostIds, key, pagesFetchedSoFar = 0) {\r\n  const idsToFetch = allPostIds.slice(\r\n    pagesFetchedSoFar * 30,\r\n    pagesFetchedSoFar * 30 + 30\r\n  );\r\n  !pagesFetchedSoFar ?? console.log('first load!');\r\n  console.log('loading! :3');\r\n\r\n  const reqs = [];\r\n\r\n  idsToFetch.forEach((id) => {\r\n    const req = fetch(`https://hacker-news.firebaseio.com/v0/item/${id}.json`);\r\n    reqs.push(req);\r\n  });\r\n\r\n  const responses = await Promise.all(reqs);\r\n  const jsonPromises = responses.map((res) => res.json());\r\n  const posts = await Promise.all(jsonPromises);\r\n\r\n  return posts;\r\n}\r\n\r\nfunction fetchTopPostIds() {\r\n  console.log('posting ids');\r\n  return fetch(\r\n    'https://hacker-news.firebaseio.com/v0/topstories.json'\r\n  ).then((res) => res.json());\r\n}\r\n","import React, { memo, useCallback } from 'react';\r\nimport PostContent from '../Post/PostContent';\r\n\r\nexport default memo(({ post, setDisplayedPost }) => {\r\n  const openHNPageInNewTab = useCallback((event) => {\r\n    event.stopPropagation();\r\n\r\n    if (typeof setDisplayedPost === 'function') setDisplayedPost(post);\r\n    else {\r\n      console.log('type of setDisplayedPost: ' + typeof setDisplayedPost);\r\n    }\r\n  }, []);\r\n\r\n  return (\r\n    <div onClick={openHNPageInNewTab} className=\"post postlist-entry\">\r\n      <PostContent post={post} />\r\n    </div>\r\n  );\r\n});\r\n","import InfiniteScroll from 'react-infinite-scroll-component';\r\nimport React, { memo } from 'react';\r\nimport PostEntry from './PostEntry';\r\n\r\nexport default memo(({ posts, setDisplayedPost, fetchPosts }) => {\r\n  // TODO: Replace 'react-infinite-scroll-component' package (uses the deprecated\r\n  //       componentWillReceiveProps) with 'react-infinite-scroller'\r\n  return (\r\n    <InfiniteScroll\r\n      dataLength={posts.length}\r\n      next={fetchPosts}\r\n      hasMore={posts.length <= 500}\r\n      loader={<h4>Loading...</h4>}\r\n      style={{ width: '640px' }}\r\n      endMessage={\r\n        <p>\r\n          <b>Yay! You have seen it all</b>\r\n        </p>\r\n      }\r\n    >\r\n      {posts.map((post) => (\r\n        <PostEntry\r\n          key={post.id}\r\n          post={post}\r\n          setDisplayedPost={setDisplayedPost}\r\n        />\r\n      ))}\r\n    </InfiniteScroll>\r\n  );\r\n});\r\n","import React, { useState, useCallback } from 'react';\r\nimport FullPost from './Components/Post/FullPost';\r\nimport './App.css';\r\nimport { useTopPosts } from './utils/getTopPosts';\r\nimport PostList from './Components/PostsList/PostList';\r\n\r\nfunction App() {\r\n  const [posts, loading, fetchPosts] = useTopPosts(30);\r\n  const [displayedPost, setDisplayedPost] = useState(null);\r\n\r\n  const clearDisplayedPost = useCallback(() => {\r\n    setDisplayedPost(null);\r\n  }, [setDisplayedPost]);\r\n\r\n  return (\r\n    <div className=\"App\">\r\n      {!displayedPost && (\r\n        <PostList\r\n          posts={posts}\r\n          fetchPosts={fetchPosts}\r\n          setDisplayedPost={setDisplayedPost}\r\n        />\r\n      )}\r\n      {displayedPost && (\r\n        <FullPost\r\n          post={displayedPost}\r\n          clearDisplayedPost={clearDisplayedPost}\r\n        />\r\n      )}\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default App;\r\n","// This optional code is used to register a service worker.\r\n// register() is not called by default.\r\n\r\n// This lets the app load faster on subsequent visits in production, and gives\r\n// it offline capabilities. However, it also means that developers (and users)\r\n// will only see deployed updates on subsequent visits to a page, after all the\r\n// existing tabs open on the page have been closed, since previously cached\r\n// resources are updated in the background.\r\n\r\n// To learn more about the benefits of this model and instructions on how to\r\n// opt-in, read https://bit.ly/CRA-PWA\r\n\r\nconst isLocalhost = Boolean(\r\n  window.location.hostname === 'localhost' ||\r\n    // [::1] is the IPv6 localhost address.\r\n    window.location.hostname === '[::1]' ||\r\n    // 127.0.0.0/8 are considered localhost for IPv4.\r\n    window.location.hostname.match(\r\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\r\n    )\r\n);\r\n\r\nexport function register(config) {\r\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\r\n    // The URL constructor is available in all browsers that support SW.\r\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\r\n    if (publicUrl.origin !== window.location.origin) {\r\n      // Our service worker won't work if PUBLIC_URL is on a different origin\r\n      // from what our page is served on. This might happen if a CDN is used to\r\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\r\n      return;\r\n    }\r\n\r\n    window.addEventListener('load', () => {\r\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\r\n\r\n      if (isLocalhost) {\r\n        // This is running on localhost. Let's check if a service worker still exists or not.\r\n        checkValidServiceWorker(swUrl, config);\r\n\r\n        // Add some additional logging to localhost, pointing developers to the\r\n        // service worker/PWA documentation.\r\n        navigator.serviceWorker.ready.then(() => {\r\n          console.log(\r\n            'This web app is being served cache-first by a service ' +\r\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\r\n          );\r\n        });\r\n      } else {\r\n        // Is not localhost. Just register service worker\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    });\r\n  }\r\n}\r\n\r\nfunction registerValidSW(swUrl, config) {\r\n  navigator.serviceWorker\r\n    .register(swUrl)\r\n    .then(registration => {\r\n      registration.onupdatefound = () => {\r\n        const installingWorker = registration.installing;\r\n        if (installingWorker == null) {\r\n          return;\r\n        }\r\n        installingWorker.onstatechange = () => {\r\n          if (installingWorker.state === 'installed') {\r\n            if (navigator.serviceWorker.controller) {\r\n              // At this point, the updated precached content has been fetched,\r\n              // but the previous service worker will still serve the older\r\n              // content until all client tabs are closed.\r\n              console.log(\r\n                'New content is available and will be used when all ' +\r\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\r\n              );\r\n\r\n              // Execute callback\r\n              if (config && config.onUpdate) {\r\n                config.onUpdate(registration);\r\n              }\r\n            } else {\r\n              // At this point, everything has been precached.\r\n              // It's the perfect time to display a\r\n              // \"Content is cached for offline use.\" message.\r\n              console.log('Content is cached for offline use.');\r\n\r\n              // Execute callback\r\n              if (config && config.onSuccess) {\r\n                config.onSuccess(registration);\r\n              }\r\n            }\r\n          }\r\n        };\r\n      };\r\n    })\r\n    .catch(error => {\r\n      console.error('Error during service worker registration:', error);\r\n    });\r\n}\r\n\r\nfunction checkValidServiceWorker(swUrl, config) {\r\n  // Check if the service worker can be found. If it can't reload the page.\r\n  fetch(swUrl, {\r\n    headers: { 'Service-Worker': 'script' },\r\n  })\r\n    .then(response => {\r\n      // Ensure service worker exists, and that we really are getting a JS file.\r\n      const contentType = response.headers.get('content-type');\r\n      if (\r\n        response.status === 404 ||\r\n        (contentType != null && contentType.indexOf('javascript') === -1)\r\n      ) {\r\n        // No service worker found. Probably a different app. Reload the page.\r\n        navigator.serviceWorker.ready.then(registration => {\r\n          registration.unregister().then(() => {\r\n            window.location.reload();\r\n          });\r\n        });\r\n      } else {\r\n        // Service worker found. Proceed as normal.\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    })\r\n    .catch(() => {\r\n      console.log(\r\n        'No internet connection found. App is running in offline mode.'\r\n      );\r\n    });\r\n}\r\n\r\nexport function unregister() {\r\n  if ('serviceWorker' in navigator) {\r\n    navigator.serviceWorker.ready\r\n      .then(registration => {\r\n        registration.unregister();\r\n      })\r\n      .catch(error => {\r\n        console.error(error.message);\r\n      });\r\n  }\r\n}\r\n","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport './index.css';\r\nimport App from './App';\r\nimport * as serviceWorker from './serviceWorker';\r\n\r\nReactDOM.render(\r\n  <React.StrictMode>\r\n    <App />\r\n  </React.StrictMode>,\r\n  document.getElementById('root')\r\n);\r\n\r\n// If you want your app to work offline and load faster, you can change\r\n// unregister() to register() below. Note this comes with some pitfalls.\r\n// Learn more about service workers: https://bit.ly/CRA-PWA\r\nserviceWorker.unregister();\r\n"],"sourceRoot":""}